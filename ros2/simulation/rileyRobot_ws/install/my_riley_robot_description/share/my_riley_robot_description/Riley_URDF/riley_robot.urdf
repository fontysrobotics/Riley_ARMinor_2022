<?xml version="1.0"?>
<robot name="riley_robot" xmlns:xacro="http://ros.org/wiki/xacro">
  <xacro:arg name="middlepart_length_input"   default="0.085" />
  <xacro:arg name="wheel_diameter_input"      default="0.126" />
  <xacro:arg name="wheel_shaft_offset_input"  default="0" />
  <xacro:arg name="middlepart_width_input"   	default="0.230" />
  <xacro:arg name="middlepart_height_input"  	default="0.096" />
  <xacro:arg name="back_wheel_diameter_input" default="0.06" />
  <xacro:arg name="tail_length_input"  	default="0.100" />
  <xacro:arg name="tail_width_input"  	default="0.06" />
  <xacro:arg name="tail_height_input"  	default="0.019" />

  <xacro:property name="middlepart_length"    value="$(arg middlepart_length_input)"/>
  <xacro:property name="wheel_diameter"      	value="$(arg wheel_diameter_input)"/> 
  <xacro:property name="wheel_shaft_offset"  	value="$(arg wheel_shaft_offset_input)"/>
  <xacro:property name="middlepart_width"  	value="$(arg middlepart_width_input)"/>
  <xacro:property name="middlepart_height"  	value="$(arg middlepart_height_input)"/>
  <xacro:property name="back_wheel_diameter" 	value="$(arg back_wheel_diameter_input)"/>
  <xacro:property name="tail_length" 		value="$(arg tail_length_input)"/>
  <xacro:property name="tail_width" 		value="$(arg tail_width_input)"/>
  <xacro:property name="tail_height" 		value="$(arg tail_height_input)"/>

<!-- Define intertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>
  
  <link name="base_footprint">
  	<xacro:box_inertia m="0" w="0" d="0" h="0"/>
  </link>

  <joint name="base_link_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint" />
    <origin xyz="0 0 ${-(wheel_diameter/2 + wheel_diameter/2)}" rpy="0 0 0" />
  </joint>
  
  <link name="base_link">
    <visual>
      <geometry>
        <box size="${middlepart_length} ${middlepart_width} ${middlepart_height}"/> 
        <mesh filename="package://my_riley_robot_description/meshes/RILey_assembly-MiddlepartV1-1.STL"/>
      </geometry>
      <material name="Gray">
        <color rgba="0.5 0.5 0.5 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="${middlepart_length} ${middlepart_width} ${middlepart_height}"/>
        <mesh filename="package://my_riley_robot_description/meshes/RILey_assembly-MiddlepartV1-1.STL"/>
      </geometry>
    </collision>
    <xacro:box_inertia m="0.317289185919371" w="${middlepart_width}" d="${middlepart_length}" h="${middlepart_height}"/>
  </link>
  
  <gazebo reference="base_link">
    <material>Gazebo/White</material>
  </gazebo>
  
  <link name="tail_link">
    <visual>
      <geometry>
        <box size="${tail_length} ${tail_width} ${tail_height}"/> 
      </geometry>
      <material name="Gray">
        <color rgba="0.5 0.5 0.5 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="${tail_length} ${tail_width} ${tail_height}"/>
      </geometry>
    </collision>
    <xacro:box_inertia m="0.317289185919371" w="${tail_width}" d="${tail_length}" h="${tail_height}"/>
  </link>
  
  <joint name="tail_link_joint" type="fixed">
    <origin xyz="${-tail_length + 0.007} 0.0 ${-tail_height + back_wheel_diameter/8}" rpy="0 0 0" />
    <parent link="base_link"/>
    <child link="tail_link" />
  </joint>
  
  <link name="back_wheel">
    <visual>
      <geometry>
        <sphere radius="${back_wheel_diameter/2}"/>
        <mesh filename="package://my_riley_robot_description/meshes/RILey_assembly-Backwheel-1.STL"/>
      </geometry>
      <material name="Gray">
        <color rgba="0.5 0.5 0.5 1.0"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${back_wheel_diameter/2}"/>
      </geometry>
    </collision>
    <xacro:sphere_inertia m="0.1" r="${back_wheel_diameter/2}"/>
  </link>
  
  <joint name="back_wheel_joint" type="fixed">
    <parent link="tail_link"/>
    <child link="back_wheel"/>
    <origin xyz="${-tail_length + (back_wheel_diameter)} 0.0 ${-(tail_height + back_wheel_diameter/3)}" rpy="0 0 0"/>
  </joint>
  
  <gazebo reference="back_wheel">
    <material>Gazebo/DarkGrey</material>
    <selfCollide>false</selfCollide>
    <mu1 value="0.05"/>
    <mu2 value="0.05"/>
    <kp value="10000000.0" />
    <kd value="1" />
    <fdir1 value="0 0 1"/>
  </gazebo>

  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_wheel">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_diameter/2}" length="0.044"/>
          <mesh filename="package://my_riley_robot_description/meshes/RILey_assembly-ReelyBuggyWheel_Right-2.STL"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_diameter/2}" length="0.044"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="0.215732042845507" r="${wheel_diameter/2}" h="0.044"/>
    </link>
    
    <gazebo reference="${prefix}_wheel">
      <material>Gazebo/DarkGrey</material>
      <selfCollide>false</selfCollide>
      <mu1 value="1"/>
      <mu2 value="1"/>
      <kp value="10000000.0" />
      <kd value="1" />
      <fdir1 value="0 0 1"/>
    </gazebo>


    <joint name="${prefix}_joint" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${prefix}_wheel"/>
      <origin xyz="${x_reflect*0.0005} ${(middlepart_width/2+0.025)*y_reflect} ${-(wheel_diameter/8)}" rpy="0 0 0"/>
    </joint>
    
    <transmission name="${prefix}_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${prefix}_joint">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
      <actuator name="${prefix}_actuator">
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:macro>


  <!-- add the wheels -->
  <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />

<link name="imu_link">
  <visual>
    <geometry>
      <box size="0.05 0.05 0.05"/>
    </geometry>
  </visual>

  <collision>
    <geometry>
      <box size="0.05 0.05 0.05"/>
    </geometry>
  </collision>

  <xacro:box_inertia m="0.05" w="0.05" d="0.05" h="0.05"/>
</link>

<joint name="imu_joint" type="fixed">
  <parent link="base_link"/>
  <child link="imu_link"/>
  <origin xyz="0 0.01 0"/>
</joint>

 <gazebo reference="imu_link">
  <sensor name="imu_sensor" type="imu">
   <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
      <ros>
        <namespace>/demo</namespace>
        <remapping>~/out:=imu</remapping>
      </ros>
      <initial_orientation_as_reference>false</initial_orientation_as_reference>
    </plugin>
    <always_on>true</always_on>
    <update_rate>100</update_rate>
    <visualize>true</visualize>
    <imu>
      <angular_velocity>
        <x>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </x>
        <y>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </y>
        <z>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </z>
      </angular_velocity>
      <linear_acceleration>
        <x>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </x>
        <y>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </y>
        <z>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </z>
      </linear_acceleration>
    </imu>
  </sensor>
</gazebo>

<gazebo>
  <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
    <ros>
      <namespace>/demo</namespace>
    </ros>

    <!-- wheels -->
    <left_joint>drivewhl_l_joint</left_joint>
    <right_joint>drivewhl_r_joint</right_joint>

    <!-- kinematics -->
    <wheel_separation>0.4</wheel_separation>
    <wheel_diameter>0.126</wheel_diameter>

    <!-- limits -->
    <max_wheel_torque>20</max_wheel_torque>
    <max_wheel_acceleration>1.0</max_wheel_acceleration>

    <!-- output -->
    <publish_odom>true</publish_odom>
    <publish_odom_tf>false</publish_odom_tf>
    <publish_wheel_tf>true</publish_wheel_tf>

    <odometry_frame>odom</odometry_frame>
    <robot_base_frame>base_link</robot_base_frame>
  </plugin>
</gazebo>

 <link name="lidar_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.125"/>
      <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
         <cylinder radius="0.018" length="0.03"/>
         <mesh filename="package://my_riley_robot_description/meshes/RILey_assembly%20-%20LD06_Assembly-1%20LD06_LiDAR-1%20LD06_LiDAR-1.STL"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
         <cylinder radius="0.018" length="0.03"/>
         <mesh filename="package://my_riley_robot_description/meshes/RILey_assembly%20-%20LD06_Assembly-1%20LD06_LiDAR-1%20LD06_LiDAR-1.STL"/>
      </geometry>
    </visual>
  </link>
    
  <joint name="lidar_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_link"/>
    <origin xyz="0 0 0.054" rpy="0 0 0"/>
  </joint>
  
  <gazebo reference="base_link">
    
  </gazebo>
  
  <gazebo reference="lidar_link">
    <material>Gazebo/DarkGrey</material>
    <sensor name="lidar" type="ray">
      <always_on>true</always_on>
      <visualize>true</visualize>
      <update_rate>5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1.000000</resolution>
            <min_angle>0.000000</min_angle>
            <max_angle>6.280000</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.120000</min>
          <max>3.5</max>
          <resolution>0.015000</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>lidar_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>
  
  <link name="camera_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.005 0.0050 0.0050"/>
      </geometry>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.005 0.0050 0.0050"/>
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.035"/>
      <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>
  </link>
  
  <joint name="camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <origin xyz="0.045 0 0.03" rpy="0 0 0"/>
  </joint>

  <link name="camera_depth_frame"/>

  <joint name="camera_depth_joint" type="fixed">
    <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    <parent link="camera_link"/>
    <child link="camera_depth_frame"/>
  </joint>

  <gazebo reference="camera_link">
    <sensor name="depth_camera" type="depth">
      <visualize>true</visualize>
      <update_rate>30.0</update_rate>
      <camera name="camera">
        <horizontal_fov>1.047198</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>3</far>
        </clip>
      </camera>
      <plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
        <baseline>0.2</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <frame_name>camera_depth_frame</frame_name>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
        <distortionK1>0</distortionK1>
        <distortionK2>0</distortionK2>
        <distortionK3>0</distortionK3>
        <distortionT1>0</distortionT1>
        <distortionT2>0</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>

</robot>

